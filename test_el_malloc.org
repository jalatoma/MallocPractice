#+TITLE: Tests for EL Malloc
#+TESTY: PREFIX="el_malloc"
#+TESTY: USE_VALGRIND=1

* Single Allocation
#+TESTY: program='./test_el_malloc "Single Allocation"'
#+BEGIN_SRC text
{
    // Tests that an allocation correctly splits the first single
    // block into 2 blocks, one used and one available

    printf("BEFORE MALLOC 0\n");
    el_print_stats();
    printf("\n");

    void *p0 = el_malloc(128);
    printf("AFTER MALLOC 0\n");
    el_print_stats();
    printf("\n");

    printf("POINTERS\n");
    print_ptr("p0", p0);
}
BEFORE MALLOC 0
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  4096}
  [  0] head @ 0x600000000000 {state: a  size:  4056}
        foot @ 0x600000000ff8 {size:  4056}
USED LIST: {length:   0  bytes:     0}

AFTER MALLOC 0
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3928}
  [  0] head @ 0x6000000000a8 {state: a  size:  3888}
        foot @ 0x600000000ff8 {size:  3888}
USED LIST: {length:   1  bytes:   168}
  [  0] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
p0: 0x600000000020
#+END_SRC

* Three Allocs
#+TESTY: program='./test_el_malloc "Three Allocs"'
#+BEGIN_SRC text
{
    // Tests that 3 allocations in a row correctly split off the main
    // block leaving 4 blocks, Used x 3 + Available x 1

    void *ptr[16] = {};
    int len = 0;

    ptr[len++] = el_malloc(128);
    printf("\nMALLOC 0\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    ptr[len++] = el_malloc(200);
    printf("\nMALLOC 1\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    ptr[len++] = el_malloc(64);
    printf("\nMALLOC 2\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);
}

MALLOC 0
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3928}
  [  0] head @ 0x6000000000a8 {state: a  size:  3888}
        foot @ 0x600000000ff8 {size:  3888}
USED LIST: {length:   1  bytes:   168}
  [  0] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020

MALLOC 1
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3688}
  [  0] head @ 0x600000000198 {state: a  size:  3648}
        foot @ 0x600000000ff8 {size:  3648}
USED LIST: {length:   2  bytes:   408}
  [  0] head @ 0x6000000000a8 {state: u  size:   200}
        foot @ 0x600000000190 {size:   200}
  [  1] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: 0x6000000000c8

MALLOC 2
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3584}
  [  0] head @ 0x600000000200 {state: a  size:  3544}
        foot @ 0x600000000ff8 {size:  3544}
USED LIST: {length:   3  bytes:   512}
  [  0] head @ 0x600000000198 {state: u  size:    64}
        foot @ 0x6000000001f8 {size:    64}
  [  1] head @ 0x6000000000a8 {state: u  size:   200}
        foot @ 0x600000000190 {size:   200}
  [  2] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: 0x6000000000c8
ptr[ 2]: 0x6000000001b8

#+END_SRC

* Required Basics
#+TESTY: program='./test_el_malloc "Required Basics"'
#+BEGIN_SRC text
{
    // Allocates 3 blocks then tests that required functions like
    // el_get_header() and el_block_below() correctly calculate the
    // positions of block parts and adjacent blocks.

    void *ptr[16] = {};
    int len = 0;

    ptr[len++] = el_malloc(128);
    ptr[len++] = el_malloc(200);
    ptr[len++] = el_malloc(64);

    el_blockhead_t *head = el_ctl.used->beg->next;
    el_blockfoot_t *foot;

    foot = el_get_footer(head);
    head = el_get_header(foot);
    print_ptr("used head 0", head);
    print_ptr("used foot 0", foot);

    head = el_block_below(head);
    foot = el_get_footer(head);
    head = el_get_header(foot);
    print_ptr("used head 1", head);
    print_ptr("used foot 1", foot);

    head = el_block_below(head);
    foot = el_get_footer(head);
    head = el_get_header(foot);
    print_ptr("used head 2", head);
    print_ptr("used foot 2", foot);

    head = el_block_below(head);
    printf("used head below 2 is: %p\n", head);

    printf("POINTERS\n");
    print_ptrs(ptr, len);
}
used head 0: 0x600000000198
used foot 0: 0x6000000001f8
used head 1: 0x6000000000a8
used foot 1: 0x600000000190
used head 2: 0x600000000000
used foot 2: 0x6000000000a0
used head below 2 is: (nil)
POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: 0x6000000000c8
ptr[ 2]: 0x6000000001b8
#+END_SRC

* Single Allocate/Free
#+TESTY: program='./test_el_malloc "Single Allocate/Free"'
#+BEGIN_SRC text
{
    // Tests a single allocate followed by freeing that block. The
    // free()'d block should be merged with the other available block
    // into a single large available block.

    void *ptr[16] = {};
    int len = 0;

    ptr[len++] = el_malloc(128);
    printf("\nMALLOC 0\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    el_free(ptr[0]);
    printf("\nFREE 0\n");
    el_print_stats();
    printf("\n");
}

MALLOC 0
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3928}
  [  0] head @ 0x6000000000a8 {state: a  size:  3888}
        foot @ 0x600000000ff8 {size:  3888}
USED LIST: {length:   1  bytes:   168}
  [  0] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020

FREE 0
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  4096}
  [  0] head @ 0x600000000000 {state: a  size:  4056}
        foot @ 0x600000000ff8 {size:  4056}
USED LIST: {length:   0  bytes:     0}

#+END_SRC

* Four Allocs Free Ver1
#+TESTY: program='./test_el_malloc "Four Allocs Free Ver1"'
#+BEGIN_SRC text
{
    // Allocates 4 times the frees 4 times in the order that the
    // allocation occured in. Looks for merging of blocks.

    void *ptr[16] = {};
    int len = 0;

    ptr[len++] = el_malloc(128);
    printf("\nMALLOC 0\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    ptr[len++] = el_malloc(200);
    printf("\nMALLOC 1\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    ptr[len++] = el_malloc(64);
    printf("\nMALLOC 2\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    ptr[len++] = el_malloc(312);
    printf("\nMALLOC 3\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    el_free(ptr[0]);
    printf("\nFREE 0\n");
    el_print_stats();
    printf("\n");

    el_free(ptr[1]);
    printf("\nFREE 1\n");
    el_print_stats();
    printf("\n");

    el_free(ptr[2]);
    printf("\nFREE 2\n");
    el_print_stats();
    printf("\n");

    el_free(ptr[3]);
    printf("\nFREE 3\n");
    el_print_stats();
    printf("\n");
}

MALLOC 0
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3928}
  [  0] head @ 0x6000000000a8 {state: a  size:  3888}
        foot @ 0x600000000ff8 {size:  3888}
USED LIST: {length:   1  bytes:   168}
  [  0] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020

MALLOC 1
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3688}
  [  0] head @ 0x600000000198 {state: a  size:  3648}
        foot @ 0x600000000ff8 {size:  3648}
USED LIST: {length:   2  bytes:   408}
  [  0] head @ 0x6000000000a8 {state: u  size:   200}
        foot @ 0x600000000190 {size:   200}
  [  1] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: 0x6000000000c8

MALLOC 2
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3584}
  [  0] head @ 0x600000000200 {state: a  size:  3544}
        foot @ 0x600000000ff8 {size:  3544}
USED LIST: {length:   3  bytes:   512}
  [  0] head @ 0x600000000198 {state: u  size:    64}
        foot @ 0x6000000001f8 {size:    64}
  [  1] head @ 0x6000000000a8 {state: u  size:   200}
        foot @ 0x600000000190 {size:   200}
  [  2] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: 0x6000000000c8
ptr[ 2]: 0x6000000001b8

MALLOC 3
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3232}
  [  0] head @ 0x600000000360 {state: a  size:  3192}
        foot @ 0x600000000ff8 {size:  3192}
USED LIST: {length:   4  bytes:   864}
  [  0] head @ 0x600000000200 {state: u  size:   312}
        foot @ 0x600000000358 {size:   312}
  [  1] head @ 0x600000000198 {state: u  size:    64}
        foot @ 0x6000000001f8 {size:    64}
  [  2] head @ 0x6000000000a8 {state: u  size:   200}
        foot @ 0x600000000190 {size:   200}
  [  3] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: 0x6000000000c8
ptr[ 2]: 0x6000000001b8
ptr[ 3]: 0x600000000220

FREE 0
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   2  bytes:  3400}
  [  0] head @ 0x600000000000 {state: a  size:   128}
        foot @ 0x6000000000a0 {size:   128}
  [  1] head @ 0x600000000360 {state: a  size:  3192}
        foot @ 0x600000000ff8 {size:  3192}
USED LIST: {length:   3  bytes:   696}
  [  0] head @ 0x600000000200 {state: u  size:   312}
        foot @ 0x600000000358 {size:   312}
  [  1] head @ 0x600000000198 {state: u  size:    64}
        foot @ 0x6000000001f8 {size:    64}
  [  2] head @ 0x6000000000a8 {state: u  size:   200}
        foot @ 0x600000000190 {size:   200}


FREE 1
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   2  bytes:  3640}
  [  0] head @ 0x600000000000 {state: a  size:   368}
        foot @ 0x600000000190 {size:   368}
  [  1] head @ 0x600000000360 {state: a  size:  3192}
        foot @ 0x600000000ff8 {size:  3192}
USED LIST: {length:   2  bytes:   456}
  [  0] head @ 0x600000000200 {state: u  size:   312}
        foot @ 0x600000000358 {size:   312}
  [  1] head @ 0x600000000198 {state: u  size:    64}
        foot @ 0x6000000001f8 {size:    64}


FREE 2
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   2  bytes:  3744}
  [  0] head @ 0x600000000000 {state: a  size:   472}
        foot @ 0x6000000001f8 {size:   472}
  [  1] head @ 0x600000000360 {state: a  size:  3192}
        foot @ 0x600000000ff8 {size:  3192}
USED LIST: {length:   1  bytes:   352}
  [  0] head @ 0x600000000200 {state: u  size:   312}
        foot @ 0x600000000358 {size:   312}


FREE 3
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  4096}
  [  0] head @ 0x600000000000 {state: a  size:  4056}
        foot @ 0x600000000ff8 {size:  4056}
USED LIST: {length:   0  bytes:     0}

#+END_SRC
* Four Allocs Free Ver2
#+TESTY: program='./test_el_malloc "Four Allocs Free Ver2"'
#+BEGIN_SRC text
{
    // Allocates 4 times again but free()'s in a different order. This
    // prevents some merging and requires different cases of merging
    // above/below.

    void *ptr[16] = {};
    int len = 0;

    ptr[len++] = el_malloc(128);
    printf("\nMALLOC 0\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    ptr[len++] = el_malloc(200);
    printf("\nMALLOC 1\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    ptr[len++] = el_malloc(64);
    printf("\nMALLOC 2\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    ptr[len++] = el_malloc(312);
    printf("\nMALLOC 3\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    el_free(ptr[1]);
    printf("\nFREE 1\n");
    el_print_stats();
    printf("\n");

    el_free(ptr[0]);
    printf("\nFREE 0\n");
    el_print_stats();
    printf("\n");

    el_free(ptr[3]);
    printf("\nFREE 3\n");
    el_print_stats();
    printf("\n");

    el_free(ptr[2]);
    printf("\nFREE 2\n");
    el_print_stats();
    printf("\n");
}

MALLOC 0
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3928}
  [  0] head @ 0x6000000000a8 {state: a  size:  3888}
        foot @ 0x600000000ff8 {size:  3888}
USED LIST: {length:   1  bytes:   168}
  [  0] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020

MALLOC 1
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3688}
  [  0] head @ 0x600000000198 {state: a  size:  3648}
        foot @ 0x600000000ff8 {size:  3648}
USED LIST: {length:   2  bytes:   408}
  [  0] head @ 0x6000000000a8 {state: u  size:   200}
        foot @ 0x600000000190 {size:   200}
  [  1] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: 0x6000000000c8

MALLOC 2
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3584}
  [  0] head @ 0x600000000200 {state: a  size:  3544}
        foot @ 0x600000000ff8 {size:  3544}
USED LIST: {length:   3  bytes:   512}
  [  0] head @ 0x600000000198 {state: u  size:    64}
        foot @ 0x6000000001f8 {size:    64}
  [  1] head @ 0x6000000000a8 {state: u  size:   200}
        foot @ 0x600000000190 {size:   200}
  [  2] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: 0x6000000000c8
ptr[ 2]: 0x6000000001b8

MALLOC 3
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3232}
  [  0] head @ 0x600000000360 {state: a  size:  3192}
        foot @ 0x600000000ff8 {size:  3192}
USED LIST: {length:   4  bytes:   864}
  [  0] head @ 0x600000000200 {state: u  size:   312}
        foot @ 0x600000000358 {size:   312}
  [  1] head @ 0x600000000198 {state: u  size:    64}
        foot @ 0x6000000001f8 {size:    64}
  [  2] head @ 0x6000000000a8 {state: u  size:   200}
        foot @ 0x600000000190 {size:   200}
  [  3] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: 0x6000000000c8
ptr[ 2]: 0x6000000001b8
ptr[ 3]: 0x600000000220

FREE 1
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   2  bytes:  3472}
  [  0] head @ 0x6000000000a8 {state: a  size:   200}
        foot @ 0x600000000190 {size:   200}
  [  1] head @ 0x600000000360 {state: a  size:  3192}
        foot @ 0x600000000ff8 {size:  3192}
USED LIST: {length:   3  bytes:   624}
  [  0] head @ 0x600000000200 {state: u  size:   312}
        foot @ 0x600000000358 {size:   312}
  [  1] head @ 0x600000000198 {state: u  size:    64}
        foot @ 0x6000000001f8 {size:    64}
  [  2] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}


FREE 0
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   2  bytes:  3640}
  [  0] head @ 0x600000000000 {state: a  size:   368}
        foot @ 0x600000000190 {size:   368}
  [  1] head @ 0x600000000360 {state: a  size:  3192}
        foot @ 0x600000000ff8 {size:  3192}
USED LIST: {length:   2  bytes:   456}
  [  0] head @ 0x600000000200 {state: u  size:   312}
        foot @ 0x600000000358 {size:   312}
  [  1] head @ 0x600000000198 {state: u  size:    64}
        foot @ 0x6000000001f8 {size:    64}


FREE 3
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   2  bytes:  3992}
  [  0] head @ 0x600000000200 {state: a  size:  3544}
        foot @ 0x600000000ff8 {size:  3544}
  [  1] head @ 0x600000000000 {state: a  size:   368}
        foot @ 0x600000000190 {size:   368}
USED LIST: {length:   1  bytes:   104}
  [  0] head @ 0x600000000198 {state: u  size:    64}
        foot @ 0x6000000001f8 {size:    64}


FREE 2
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  4096}
  [  0] head @ 0x600000000000 {state: a  size:  4056}
        foot @ 0x600000000ff8 {size:  4056}
USED LIST: {length:   0  bytes:     0}

#+END_SRC
* Four Allocs Free Ver3
#+TESTY: program='./test_el_malloc "Four Allocs Free Ver3"'
#+BEGIN_SRC text
{
    // Another variation of allocating 4 times then free()'ing blocks
    // in a different order to examine if mergin works properly.

    void *ptr[16] = {};
    int len = 0;

    ptr[len++] = el_malloc(128);
    printf("\nMALLOC 0\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    ptr[len++] = el_malloc(200);
    printf("\nMALLOC 1\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    ptr[len++] = el_malloc(64);
    printf("\nMALLOC 2\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    ptr[len++] = el_malloc(312);
    printf("\nMALLOC 3\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    el_free(ptr[3]);
    printf("\nFREE 3\n");
    el_print_stats();
    printf("\n");

    el_free(ptr[0]);
    printf("\nFREE 0\n");
    el_print_stats();
    printf("\n");

    el_free(ptr[2]);
    printf("\nFREE 2\n");
    el_print_stats();
    printf("\n");

    el_free(ptr[1]);
    printf("\nFREE 1\n");
    el_print_stats();
    printf("\n");
}

MALLOC 0
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3928}
  [  0] head @ 0x6000000000a8 {state: a  size:  3888}
        foot @ 0x600000000ff8 {size:  3888}
USED LIST: {length:   1  bytes:   168}
  [  0] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020

MALLOC 1
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3688}
  [  0] head @ 0x600000000198 {state: a  size:  3648}
        foot @ 0x600000000ff8 {size:  3648}
USED LIST: {length:   2  bytes:   408}
  [  0] head @ 0x6000000000a8 {state: u  size:   200}
        foot @ 0x600000000190 {size:   200}
  [  1] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: 0x6000000000c8

MALLOC 2
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3584}
  [  0] head @ 0x600000000200 {state: a  size:  3544}
        foot @ 0x600000000ff8 {size:  3544}
USED LIST: {length:   3  bytes:   512}
  [  0] head @ 0x600000000198 {state: u  size:    64}
        foot @ 0x6000000001f8 {size:    64}
  [  1] head @ 0x6000000000a8 {state: u  size:   200}
        foot @ 0x600000000190 {size:   200}
  [  2] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: 0x6000000000c8
ptr[ 2]: 0x6000000001b8

MALLOC 3
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3232}
  [  0] head @ 0x600000000360 {state: a  size:  3192}
        foot @ 0x600000000ff8 {size:  3192}
USED LIST: {length:   4  bytes:   864}
  [  0] head @ 0x600000000200 {state: u  size:   312}
        foot @ 0x600000000358 {size:   312}
  [  1] head @ 0x600000000198 {state: u  size:    64}
        foot @ 0x6000000001f8 {size:    64}
  [  2] head @ 0x6000000000a8 {state: u  size:   200}
        foot @ 0x600000000190 {size:   200}
  [  3] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: 0x6000000000c8
ptr[ 2]: 0x6000000001b8
ptr[ 3]: 0x600000000220

FREE 3
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3584}
  [  0] head @ 0x600000000200 {state: a  size:  3544}
        foot @ 0x600000000ff8 {size:  3544}
USED LIST: {length:   3  bytes:   512}
  [  0] head @ 0x600000000198 {state: u  size:    64}
        foot @ 0x6000000001f8 {size:    64}
  [  1] head @ 0x6000000000a8 {state: u  size:   200}
        foot @ 0x600000000190 {size:   200}
  [  2] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}


FREE 0
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   2  bytes:  3752}
  [  0] head @ 0x600000000000 {state: a  size:   128}
        foot @ 0x6000000000a0 {size:   128}
  [  1] head @ 0x600000000200 {state: a  size:  3544}
        foot @ 0x600000000ff8 {size:  3544}
USED LIST: {length:   2  bytes:   344}
  [  0] head @ 0x600000000198 {state: u  size:    64}
        foot @ 0x6000000001f8 {size:    64}
  [  1] head @ 0x6000000000a8 {state: u  size:   200}
        foot @ 0x600000000190 {size:   200}


FREE 2
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   2  bytes:  3856}
  [  0] head @ 0x600000000198 {state: a  size:  3648}
        foot @ 0x600000000ff8 {size:  3648}
  [  1] head @ 0x600000000000 {state: a  size:   128}
        foot @ 0x6000000000a0 {size:   128}
USED LIST: {length:   1  bytes:   240}
  [  0] head @ 0x6000000000a8 {state: u  size:   200}
        foot @ 0x600000000190 {size:   200}


FREE 1
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  4096}
  [  0] head @ 0x600000000000 {state: a  size:  4056}
        foot @ 0x600000000ff8 {size:  4056}
USED LIST: {length:   0  bytes:     0}

#+END_SRC

* Alloc Fails
#+TESTY: program='./test_el_malloc "Alloc Fails"'
#+BEGIN_SRC text
{
    // Allocates 4 times which each succeed. Then attempts to allocate
    // again for a large block which cannot be allocated. el_malloc()
    // should return NULL in this case and the heap remains unchanged.

    void *ptr[16] = {};
    int len = 0;

    ptr[len++] = el_malloc(1000);
    ptr[len++] = el_malloc(1000);
    ptr[len++] = el_malloc(1000);
    ptr[len++] = el_malloc(800);
    printf("\nMALLOC 4\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    ptr[len++] = el_malloc(512);
    printf("\nMALLOC 5\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);
    printf("should be (nil)\n");
}

MALLOC 4
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:   136}
  [  0] head @ 0x600000000f78 {state: a  size:    96}
        foot @ 0x600000000ff8 {size:    96}
USED LIST: {length:   4  bytes:  3960}
  [  0] head @ 0x600000000c30 {state: u  size:   800}
        foot @ 0x600000000f70 {size:   800}
  [  1] head @ 0x600000000820 {state: u  size:  1000}
        foot @ 0x600000000c28 {size:  1000}
  [  2] head @ 0x600000000410 {state: u  size:  1000}
        foot @ 0x600000000818 {size:  1000}
  [  3] head @ 0x600000000000 {state: u  size:  1000}
        foot @ 0x600000000408 {size:  1000}

POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: 0x600000000430
ptr[ 2]: 0x600000000840
ptr[ 3]: 0x600000000c50

MALLOC 5
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:   136}
  [  0] head @ 0x600000000f78 {state: a  size:    96}
        foot @ 0x600000000ff8 {size:    96}
USED LIST: {length:   4  bytes:  3960}
  [  0] head @ 0x600000000c30 {state: u  size:   800}
        foot @ 0x600000000f70 {size:   800}
  [  1] head @ 0x600000000820 {state: u  size:  1000}
        foot @ 0x600000000c28 {size:  1000}
  [  2] head @ 0x600000000410 {state: u  size:  1000}
        foot @ 0x600000000818 {size:  1000}
  [  3] head @ 0x600000000000 {state: u  size:  1000}
        foot @ 0x600000000408 {size:  1000}

POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: 0x600000000430
ptr[ 2]: 0x600000000840
ptr[ 3]: 0x600000000c50
ptr[ 4]: (nil)
should be (nil)
#+END_SRC

* EL Demo
#+TESTY: program='./test_el_malloc "EL Demo"'
#+BEGIN_SRC text
{
   // Recreates the behavior of the el_demo.c program and checks that
    // allocations/mergins are occurring correctly.

    printf("INITIAL\n");
    el_print_stats();
    printf("\n");

    void *p1 = el_malloc(128);
    void *p2 = el_malloc(48);
    void *p3 = el_malloc(156);
    printf("MALLOC 3\n");
    el_print_stats();
    printf("\n");

    printf("POINTERS\n");
    print_ptr("p3", p3);
    print_ptr("p2", p2);
    print_ptr("p1", p1);
    printf("\n");

    void *p4 = el_malloc(22);
    void *p5 = el_malloc(64);
    printf("MALLOC 5\n");
    el_print_stats();
    printf("\n");

    printf("POINTERS\n");
    print_ptr("p5", p5);
    print_ptr("p4", p4);
    print_ptr("p3", p3);
    print_ptr("p2", p2);
    print_ptr("p1", p1);
    printf("\n");

    el_free(p1);
    printf("FREE 1\n");
    el_print_stats();
    printf("\n");

    el_free(p3);
    printf("FREE 3\n");
    el_print_stats();
    printf("\n");

    p3 = el_malloc(32);
    p1 = el_malloc(200);

    printf("RE-ALLOC 3,1\n");
    el_print_stats();
    printf("\n");

    printf("POINTERS\n");
    print_ptr("p1", p1);
    print_ptr("p3", p3);
    print_ptr("p5", p5);
    print_ptr("p4", p4);
    print_ptr("p2", p2);
    printf("\n");

    el_free(p1);

    printf("FREE'D 1\n");
    el_print_stats();
    printf("\n");

    el_free(p2);

    printf("FREE'D 2\n");
    el_print_stats();
    printf("\n");

    el_free(p3);
    el_free(p4);
    el_free(p5);

    printf("FREE'D 3,4,5\n");
    el_print_stats();
    printf("\n");
}
INITIAL
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  4096}
  [  0] head @ 0x600000000000 {state: a  size:  4056}
        foot @ 0x600000000ff8 {size:  4056}
USED LIST: {length:   0  bytes:     0}

MALLOC 3
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3644}
  [  0] head @ 0x6000000001c4 {state: a  size:  3604}
        foot @ 0x600000000ff8 {size:  3604}
USED LIST: {length:   3  bytes:   452}
  [  0] head @ 0x600000000100 {state: u  size:   156}
        foot @ 0x6000000001bc {size:   156}
  [  1] head @ 0x6000000000a8 {state: u  size:    48}
        foot @ 0x6000000000f8 {size:    48}
  [  2] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
p3: 0x600000000120
p2: 0x6000000000c8
p1: 0x600000000020

MALLOC 5
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3478}
  [  0] head @ 0x60000000026a {state: a  size:  3438}
        foot @ 0x600000000ff8 {size:  3438}
USED LIST: {length:   5  bytes:   618}
  [  0] head @ 0x600000000202 {state: u  size:    64}
        foot @ 0x600000000262 {size:    64}
  [  1] head @ 0x6000000001c4 {state: u  size:    22}
        foot @ 0x6000000001fa {size:    22}
  [  2] head @ 0x600000000100 {state: u  size:   156}
        foot @ 0x6000000001bc {size:   156}
  [  3] head @ 0x6000000000a8 {state: u  size:    48}
        foot @ 0x6000000000f8 {size:    48}
  [  4] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
p5: 0x600000000222
p4: 0x6000000001e4
p3: 0x600000000120
p2: 0x6000000000c8
p1: 0x600000000020

FREE 1
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   2  bytes:  3646}
  [  0] head @ 0x600000000000 {state: a  size:   128}
        foot @ 0x6000000000a0 {size:   128}
  [  1] head @ 0x60000000026a {state: a  size:  3438}
        foot @ 0x600000000ff8 {size:  3438}
USED LIST: {length:   4  bytes:   450}
  [  0] head @ 0x600000000202 {state: u  size:    64}
        foot @ 0x600000000262 {size:    64}
  [  1] head @ 0x6000000001c4 {state: u  size:    22}
        foot @ 0x6000000001fa {size:    22}
  [  2] head @ 0x600000000100 {state: u  size:   156}
        foot @ 0x6000000001bc {size:   156}
  [  3] head @ 0x6000000000a8 {state: u  size:    48}
        foot @ 0x6000000000f8 {size:    48}

FREE 3
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   3  bytes:  3842}
  [  0] head @ 0x600000000100 {state: a  size:   156}
        foot @ 0x6000000001bc {size:   156}
  [  1] head @ 0x600000000000 {state: a  size:   128}
        foot @ 0x6000000000a0 {size:   128}
  [  2] head @ 0x60000000026a {state: a  size:  3438}
        foot @ 0x600000000ff8 {size:  3438}
USED LIST: {length:   3  bytes:   254}
  [  0] head @ 0x600000000202 {state: u  size:    64}
        foot @ 0x600000000262 {size:    64}
  [  1] head @ 0x6000000001c4 {state: u  size:    22}
        foot @ 0x6000000001fa {size:    22}
  [  2] head @ 0x6000000000a8 {state: u  size:    48}
        foot @ 0x6000000000f8 {size:    48}

RE-ALLOC 3,1
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   3  bytes:  3530}
  [  0] head @ 0x60000000035a {state: a  size:  3198}
        foot @ 0x600000000ff8 {size:  3198}
  [  1] head @ 0x600000000148 {state: a  size:    84}
        foot @ 0x6000000001bc {size:    84}
  [  2] head @ 0x600000000000 {state: a  size:   128}
        foot @ 0x6000000000a0 {size:   128}
USED LIST: {length:   5  bytes:   566}
  [  0] head @ 0x60000000026a {state: u  size:   200}
        foot @ 0x600000000352 {size:   200}
  [  1] head @ 0x600000000100 {state: u  size:    32}
        foot @ 0x600000000140 {size:    32}
  [  2] head @ 0x600000000202 {state: u  size:    64}
        foot @ 0x600000000262 {size:    64}
  [  3] head @ 0x6000000001c4 {state: u  size:    22}
        foot @ 0x6000000001fa {size:    22}
  [  4] head @ 0x6000000000a8 {state: u  size:    48}
        foot @ 0x6000000000f8 {size:    48}

POINTERS
p1: 0x60000000028a
p3: 0x600000000120
p5: 0x600000000222
p4: 0x6000000001e4
p2: 0x6000000000c8

FREE'D 1
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   3  bytes:  3770}
  [  0] head @ 0x60000000026a {state: a  size:  3438}
        foot @ 0x600000000ff8 {size:  3438}
  [  1] head @ 0x600000000148 {state: a  size:    84}
        foot @ 0x6000000001bc {size:    84}
  [  2] head @ 0x600000000000 {state: a  size:   128}
        foot @ 0x6000000000a0 {size:   128}
USED LIST: {length:   4  bytes:   326}
  [  0] head @ 0x600000000100 {state: u  size:    32}
        foot @ 0x600000000140 {size:    32}
  [  1] head @ 0x600000000202 {state: u  size:    64}
        foot @ 0x600000000262 {size:    64}
  [  2] head @ 0x6000000001c4 {state: u  size:    22}
        foot @ 0x6000000001fa {size:    22}
  [  3] head @ 0x6000000000a8 {state: u  size:    48}
        foot @ 0x6000000000f8 {size:    48}

FREE'D 2
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   3  bytes:  3858}
  [  0] head @ 0x600000000000 {state: a  size:   216}
        foot @ 0x6000000000f8 {size:   216}
  [  1] head @ 0x60000000026a {state: a  size:  3438}
        foot @ 0x600000000ff8 {size:  3438}
  [  2] head @ 0x600000000148 {state: a  size:    84}
        foot @ 0x6000000001bc {size:    84}
USED LIST: {length:   3  bytes:   238}
  [  0] head @ 0x600000000100 {state: u  size:    32}
        foot @ 0x600000000140 {size:    32}
  [  1] head @ 0x600000000202 {state: u  size:    64}
        foot @ 0x600000000262 {size:    64}
  [  2] head @ 0x6000000001c4 {state: u  size:    22}
        foot @ 0x6000000001fa {size:    22}

FREE'D 3,4,5
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  4096}
  [  0] head @ 0x600000000000 {state: a  size:  4056}
        foot @ 0x600000000ff8 {size:  4056}
USED LIST: {length:   0  bytes:     0}

#+END_SRC

* Stress 1
#+TESTY: program='./test_el_malloc "Stress 1"'
#+BEGIN_SRC text
{
    // Stress testing with many malloc()'s / free()'s. More thoroughly
    // tests combinations of calls and sequences. Implementations that
    // may have appeared correct in simple tests may buckle under such
    // added stress.

    void *ptr[16] = {};
    int len = 0;

    ptr[len++] = el_malloc(128);
    ptr[len++] = el_malloc(256);
    ptr[len++] = el_malloc(64);
    ptr[len++] = el_malloc(200);
    printf("MALLOC 1-4\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    el_free(ptr[2]);
    ptr[2] = NULL;
    printf("\nFREE 2\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    ptr[len++] = el_malloc(64);
    printf("\nMALLOC 5\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    el_free(ptr[1]);
    ptr[1] = NULL;
    printf("\nFREE 1\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    ptr[len++] = el_malloc(50);
    ptr[len++] = el_malloc(50);
    printf("\nMALLOC 6-7\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    ptr[len++] = el_malloc(100);
    printf("\nMALLOC 8\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    el_free(ptr[5]);
    ptr[5] = NULL;
    el_free(ptr[0]);
    ptr[0] = NULL;
    el_free(ptr[6]);
    ptr[6] = NULL;
    printf("\nFREE 5,0,6\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);

    ptr[len++] = el_malloc(200);
    ptr[len++] = el_malloc(512);
    ptr[len++] = el_malloc(16);
    ptr[len++] = el_malloc(32);
    printf("\nMALLOC 9,10,11\n");
    el_print_stats();
    printf("\n");
    printf("POINTERS\n");
    print_ptrs(ptr, len);
}
MALLOC 1-4
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   1  bytes:  3288}
  [  0] head @ 0x600000000328 {state: a  size:  3248}
        foot @ 0x600000000ff8 {size:  3248}
USED LIST: {length:   4  bytes:   808}
  [  0] head @ 0x600000000238 {state: u  size:   200}
        foot @ 0x600000000320 {size:   200}
  [  1] head @ 0x6000000001d0 {state: u  size:    64}
        foot @ 0x600000000230 {size:    64}
  [  2] head @ 0x6000000000a8 {state: u  size:   256}
        foot @ 0x6000000001c8 {size:   256}
  [  3] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: 0x6000000000c8
ptr[ 2]: 0x6000000001f0
ptr[ 3]: 0x600000000258

FREE 2
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   2  bytes:  3392}
  [  0] head @ 0x6000000001d0 {state: a  size:    64}
        foot @ 0x600000000230 {size:    64}
  [  1] head @ 0x600000000328 {state: a  size:  3248}
        foot @ 0x600000000ff8 {size:  3248}
USED LIST: {length:   3  bytes:   704}
  [  0] head @ 0x600000000238 {state: u  size:   200}
        foot @ 0x600000000320 {size:   200}
  [  1] head @ 0x6000000000a8 {state: u  size:   256}
        foot @ 0x6000000001c8 {size:   256}
  [  2] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: 0x6000000000c8
ptr[ 2]: (nil)
ptr[ 3]: 0x600000000258

MALLOC 5
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   2  bytes:  3288}
  [  0] head @ 0x600000000390 {state: a  size:  3144}
        foot @ 0x600000000ff8 {size:  3144}
  [  1] head @ 0x6000000001d0 {state: a  size:    64}
        foot @ 0x600000000230 {size:    64}
USED LIST: {length:   4  bytes:   808}
  [  0] head @ 0x600000000328 {state: u  size:    64}
        foot @ 0x600000000388 {size:    64}
  [  1] head @ 0x600000000238 {state: u  size:   200}
        foot @ 0x600000000320 {size:   200}
  [  2] head @ 0x6000000000a8 {state: u  size:   256}
        foot @ 0x6000000001c8 {size:   256}
  [  3] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: 0x6000000000c8
ptr[ 2]: (nil)
ptr[ 3]: 0x600000000258
ptr[ 4]: 0x600000000348

FREE 1
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   2  bytes:  3584}
  [  0] head @ 0x6000000000a8 {state: a  size:   360}
        foot @ 0x600000000230 {size:   360}
  [  1] head @ 0x600000000390 {state: a  size:  3144}
        foot @ 0x600000000ff8 {size:  3144}
USED LIST: {length:   3  bytes:   512}
  [  0] head @ 0x600000000328 {state: u  size:    64}
        foot @ 0x600000000388 {size:    64}
  [  1] head @ 0x600000000238 {state: u  size:   200}
        foot @ 0x600000000320 {size:   200}
  [  2] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: (nil)
ptr[ 2]: (nil)
ptr[ 3]: 0x600000000258
ptr[ 4]: 0x600000000348

MALLOC 6-7
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   2  bytes:  3404}
  [  0] head @ 0x60000000015c {state: a  size:   180}
        foot @ 0x600000000230 {size:   180}
  [  1] head @ 0x600000000390 {state: a  size:  3144}
        foot @ 0x600000000ff8 {size:  3144}
USED LIST: {length:   5  bytes:   692}
  [  0] head @ 0x600000000102 {state: u  size:    50}
        foot @ 0x600000000154 {size:    50}
  [  1] head @ 0x6000000000a8 {state: u  size:    50}
        foot @ 0x6000000000fa {size:    50}
  [  2] head @ 0x600000000328 {state: u  size:    64}
        foot @ 0x600000000388 {size:    64}
  [  3] head @ 0x600000000238 {state: u  size:   200}
        foot @ 0x600000000320 {size:   200}
  [  4] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: (nil)
ptr[ 2]: (nil)
ptr[ 3]: 0x600000000258
ptr[ 4]: 0x600000000348
ptr[ 5]: 0x6000000000c8
ptr[ 6]: 0x600000000122

MALLOC 8
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   2  bytes:  3264}
  [  0] head @ 0x6000000001e8 {state: a  size:    40}
        foot @ 0x600000000230 {size:    40}
  [  1] head @ 0x600000000390 {state: a  size:  3144}
        foot @ 0x600000000ff8 {size:  3144}
USED LIST: {length:   6  bytes:   832}
  [  0] head @ 0x60000000015c {state: u  size:   100}
        foot @ 0x6000000001e0 {size:   100}
  [  1] head @ 0x600000000102 {state: u  size:    50}
        foot @ 0x600000000154 {size:    50}
  [  2] head @ 0x6000000000a8 {state: u  size:    50}
        foot @ 0x6000000000fa {size:    50}
  [  3] head @ 0x600000000328 {state: u  size:    64}
        foot @ 0x600000000388 {size:    64}
  [  4] head @ 0x600000000238 {state: u  size:   200}
        foot @ 0x600000000320 {size:   200}
  [  5] head @ 0x600000000000 {state: u  size:   128}
        foot @ 0x6000000000a0 {size:   128}

POINTERS
ptr[ 0]: 0x600000000020
ptr[ 1]: (nil)
ptr[ 2]: (nil)
ptr[ 3]: 0x600000000258
ptr[ 4]: 0x600000000348
ptr[ 5]: 0x6000000000c8
ptr[ 6]: 0x600000000122
ptr[ 7]: 0x60000000017c

FREE 5,0,6
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   3  bytes:  3612}
  [  0] head @ 0x600000000000 {state: a  size:   308}
        foot @ 0x600000000154 {size:   308}
  [  1] head @ 0x6000000001e8 {state: a  size:    40}
        foot @ 0x600000000230 {size:    40}
  [  2] head @ 0x600000000390 {state: a  size:  3144}
        foot @ 0x600000000ff8 {size:  3144}
USED LIST: {length:   3  bytes:   484}
  [  0] head @ 0x60000000015c {state: u  size:   100}
        foot @ 0x6000000001e0 {size:   100}
  [  1] head @ 0x600000000328 {state: u  size:    64}
        foot @ 0x600000000388 {size:    64}
  [  2] head @ 0x600000000238 {state: u  size:   200}
        foot @ 0x600000000320 {size:   200}

POINTERS
ptr[ 0]: (nil)
ptr[ 1]: (nil)
ptr[ 2]: (nil)
ptr[ 3]: 0x600000000258
ptr[ 4]: 0x600000000348
ptr[ 5]: (nil)
ptr[ 6]: (nil)
ptr[ 7]: 0x60000000017c

MALLOC 9,10,11
HEAP STATS (overhead per node: 40)
heap_start:  0x600000000000
heap_end:    0x600000001000
total_bytes: 4096
AVAILABLE LIST: {length:   3  bytes:  2692}
  [  0] head @ 0x600000000638 {state: a  size:  2464}
        foot @ 0x600000000ff8 {size:  2464}
  [  1] head @ 0x6000000000f0 {state: a  size:    68}
        foot @ 0x600000000154 {size:    68}
  [  2] head @ 0x6000000001e8 {state: a  size:    40}
        foot @ 0x600000000230 {size:    40}
USED LIST: {length:   7  bytes:  1404}
  [  0] head @ 0x6000000005f0 {state: u  size:    32}
        foot @ 0x600000000630 {size:    32}
  [  1] head @ 0x6000000005b8 {state: u  size:    16}
        foot @ 0x6000000005e8 {size:    16}
  [  2] head @ 0x600000000390 {state: u  size:   512}
        foot @ 0x6000000005b0 {size:   512}
  [  3] head @ 0x600000000000 {state: u  size:   200}
        foot @ 0x6000000000e8 {size:   200}
  [  4] head @ 0x60000000015c {state: u  size:   100}
        foot @ 0x6000000001e0 {size:   100}
  [  5] head @ 0x600000000328 {state: u  size:    64}
        foot @ 0x600000000388 {size:    64}
  [  6] head @ 0x600000000238 {state: u  size:   200}
        foot @ 0x600000000320 {size:   200}

POINTERS
ptr[ 0]: (nil)
ptr[ 1]: (nil)
ptr[ 2]: (nil)
ptr[ 3]: 0x600000000258
ptr[ 4]: 0x600000000348
ptr[ 5]: (nil)
ptr[ 6]: (nil)
ptr[ 7]: 0x60000000017c
ptr[ 8]: 0x600000000020
ptr[ 9]: 0x6000000003b0
ptr[10]: 0x6000000005d8
ptr[11]: 0x600000000610
#+END_SRC
